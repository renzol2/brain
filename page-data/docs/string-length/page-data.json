{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/docs/string-length","result":{"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"cs-374 computer-science strings theory\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"string-length\"\n  }, \"String Length\"), mdx(\"h2\", {\n    \"id\": \"theory\"\n  }, \"Theory\"), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"length\"), \" $|w|$ of a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/string\",\n    \"title\": \"string\"\n  }, \"[[string]]\"), \" $w$ is the number of symbols in $w$.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ex. the string $\\\\text{FIFTEEN}$ has length 7\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"rarely distinguish between symbols and strings of length 1\")), mdx(\"p\", null, \"The length function for an arbitrary string $w$ is defined recursively as follows:\"), mdx(\"p\", null, \"$$\\n|w| := \\\\begin{cases}\\n0 & \\\\text{if } w = \\\\epsilon \", \"\\\\\", \"\\n1 + |x| & \\\\text{if } w = ax \", \"\\\\\", \"\\n\\\\end{cases}\\n$$\"), mdx(\"h2\", {\n    \"id\": \"sources\"\n  }, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://courses.engr.illinois.edu/cs374/fa2021/A/notes/models/01-strings.pdf\"\n  }, \"Algorithms: Strings by Jeff Erickson\"))));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"cs-374 computer-science strings theory\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"string\"\n  }, \"String\"), mdx(\"h2\", {\n    \"id\": \"theory\"\n  }, \"Theory\"), mdx(\"p\", null, \"A \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"string\"), \" (or word) is a finite sequence of zero or more symbols from an \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/alphabet\",\n    \"title\": \"alphabet\"\n  }, \"[[alphabet]]\"), \" $\\\\Sigma$. Formally, a string $w$ over $\\\\Sigma$ is defined recursively as either\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the empty string, denoted by $\\\\epsilon$\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"an ordered pair $(a,x)$ where $a$ is a symbol in $\\\\Sigma$ and $x$ is a string over $\\\\Sigma$\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the ordered pair $(a,x)$ is normally written as $a \\\\cdot x$ or simply $ax$\")))), mdx(\"p\", null, \"For simplicity, explicit strings are written as sequences of symbols instead of nested ordered pairs:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the difference between $\\\\text{STRING}$ and $(S,(T,(R,(I,(N(G,\\\\epsilon)))))$.\")), mdx(\"p\", null, \"The set of all strings over $\\\\Sigma$ is denoted $\\\\Sigma^*$ (pronounced \\\"sigma star\\\").\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"every element of $\\\\Sigma^*$ is a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"finite\"), \" string\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$\\\\Sigma^*$ itself is an infinite set containing strings of every possible \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"finite\"), \" length\")), mdx(\"p\", null, \"There are two natural functions for strings:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/string-lengthorthe-length-of-a-string\",\n    \"title\": \"string-length|the length of a string\"\n  }, \"[[string-length|the length of a string]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"concatenating two strings together\")), mdx(\"p\", null, \"Ultimately, the input and output of any \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/algorithm\",\n    \"title\": \"algorithm\"\n  }, \"[[algorithm]]\"), \" must be representable as a finite string of symbols - the raw contents of some contiguous portion of the computer's memory. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Reasoning about computation requires reasoning about strings\"), \".\"), mdx(\"h2\", {\n    \"id\": \"sources\"\n  }, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://courses.engr.illinois.edu/cs374/fa2021/A/notes/models/01-strings.pdf\"\n  }, \"Algorithms: Strings by Jeff Erickson\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"8a70e0c8-5f70-5778-9640-58bda98d0d34","fields":{"slug":"/docs/string","title":"String"}}}],"inboundReferences":[]},"fields":{"slug":"/docs/string-length","title":"String Length"}}},"pageContext":{"id":"63f8faab-aefa-5f7b-9ac9-e7418ec3fd55"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}