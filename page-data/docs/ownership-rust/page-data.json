{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/docs/ownership-rust","result":{"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"rust programming-language computer-science\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"ownership-rust\"\n  }, \"Ownership (Rust)\"), mdx(\"p\", null, \"In \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Rust\",\n    \"title\": \"Rust\"\n  }, \"[[Rust]]\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ownership\"), \" involves a set of rules regarding memory:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Each value in Rust has a variable that's called its \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"owner\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There can only be one owner at a time\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When the owner goes out of scope, the value will be dropped\")), mdx(\"h2\", {\n    \"id\": \"scope\"\n  }, \"Scope\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"{   // s is not valid here, it\\u2019s not yet declared\\n    let s = String::from(\\\"hello\\\");\\n    // s is valid from this point forward\\n\\n    // do stuff with s\\n}\\n// this scope is now over, and s is no longer valid\\n\")), mdx(\"p\", null, \"Rust works similarly to other languages in regards to scope:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When a variable comes \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"into scope\"), \", it is valid\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It remains valid until it goes \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"out of scope\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Deallocates resources at the end of the variable's lifetime\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"known as \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Resource Acquisition is Initialization (RAII)\"))))), mdx(\"p\", null, \"This deallocation is performed by a special Rust function, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"drop\"), \". Rust calls \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"drop\"), \" automatically for mutable types.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the author of such a type (ex. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"String\"), \") puts code in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"drop\"), \" method to return the memory allocated by the variable\")), mdx(\"h2\", {\n    \"id\": \"move\"\n  }, \"Move\"), mdx(\"p\", null, \"Variables that implement the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Copy\"), \" trait have their values copied when interacting with the same data.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let x = 5;\\nlet y = x;\\n\")), mdx(\"p\", null, \"Both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"y\"), \" are variables bound to the value \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"5\"), \". The two \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"5\"), \" values are both pushed onto the stack, since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"u32\"), \" implements the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Copy\"), \" trait. Therefore, both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"y\"), \" can be used after this code. Here's a list of types that implement \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Copy\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"all integer types\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"bool\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"all floating point types\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"char\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tuples, if they only contain types that also implement \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Copy\"))), mdx(\"p\", null, \"However, for types that do not implement the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Copy\"), \" trait:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let s1 = String::from(\\\"hello\\\");\\nlet s2 = s1;\\n\\n// This causes a compiler error!\\nprintln!(\\\"{}, world!\\\", s1);\\n\")), mdx(\"p\", null, \"Here, ownership is transferred from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"s1\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"s2\"), \", since \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \"s do not implement \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Copy\"), \". Rust will never automatically create \\\"deep\\\" copies of data, so any \\\"automatic\\\" copying can be assumed to be inexpensive. To create a deep copy, we use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clone\"), \" method.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let s1 = String::from(\\\"hello\\\");\\nlet s2 = s1.clone();\\n\\nprintln!(\\\"s1 = {}, s2 = {}\\\", s1, s2);\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clone\"), \" is a visual indicator that arbitrary code is being executed, and that code may be expensive.\"), mdx(\"h2\", {\n    \"id\": \"benefits\"\n  }, \"Benefits\"), mdx(\"p\", null, \"Ownership solves several problems:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"keeping track of what parts of your code are using what data on the heap\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"minimizing the amount of duplicate data on the heap\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"cleaning up unused data on the heap to avoid running out of space\")), mdx(\"h2\", {\n    \"id\": \"sources\"\n  }, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html\"\n  }, \"https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html\"))));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"computer-science programming-languages rust\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"rust\"\n  }, \"Rust\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#rust\"\n  }, \"Rust\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#types\"\n  }, \"Types\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#standard-library-std\"\n  }, \"Standard library (\", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"std\"), \")\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#variables\"\n  }, \"Variables\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#associated-functions\"\n  }, \"Associated Functions\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#references\"\n  }, \"References\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#enums\"\n  }, \"Enums\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#match-expression\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"match\"), \" expression\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#sources\"\n  }, \"Sources\"))))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Rust\"), \" is a programming language focused on delivering high performance with low-level access alongside an improved developer experience compared to existing low-level languages like C and C++.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"runs very fast\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"prevents memory leaks and segmentation faults\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"guarantees thread safety\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"stresses performance and correctness\")), mdx(\"p\", null, \"Can be compiled down to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/WebAssembly\",\n    \"title\": \"WebAssembly\"\n  }, \"[[WebAssembly]]\"), \" for use in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/client-side-renderingorclient-side\",\n    \"title\": \"client-side-rendering|client-side\"\n  }, \"[[client-side-rendering|client-side]]\"), \" web applications.\"), mdx(\"h2\", {\n    \"id\": \"types\"\n  }, \"Types\"), mdx(\"p\", null, \"Rust has a strong, static type system. However, it also has type inference.\"), mdx(\"p\", null, \"Number types:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"i32\"), \", a 32-\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/bit\",\n    \"title\": \"bit\"\n  }, \"[[bit]]\"), \" number\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"u32\"), \", an unsigned 32-bit number\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"useful for small, positive numbers\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"i64\"), \", a 64-bit number\")), mdx(\"h2\", {\n    \"id\": \"standard-library-std\"\n  }, \"Standard library (\", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"std\"), \")\"), mdx(\"p\", null, \"Rust's standard library has many useful packages:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"std::io\"), \" (input/output)\")), mdx(\"p\", null, \"Rust imports some packages automatically into every Rust program in the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"prelude\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"kept small as possible\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"contains things used in every Rust program, like \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"traits\"))), mdx(\"h2\", {\n    \"id\": \"variables\"\n  }, \"Variables\"), mdx(\"p\", null, \"See: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/variables-rustorVariables-(Rust)\",\n    \"title\": \"variables-rust|Variables (Rust)\"\n  }, \"[[variables-rust|Variables (Rust)]]\"), \"\"), mdx(\"h2\", {\n    \"id\": \"associated-functions\"\n  }, \"Associated Functions\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let mut guess = String::new();\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"::\"), \" syntax means that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new\"), \" is an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"associated function\"), \"\\nof the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \" type. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new\"), \" function creates a new, empty string. As a function, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new\"), \" is a common name across many types for a function that makes a new value of some kind.\"), mdx(\"h2\", {\n    \"id\": \"references\"\n  }, \"References\"), mdx(\"p\", null, \"A \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"reference\"), \" is a way to let multiple parts of the code access one piece of data without needing to copy that data into memory multiple times.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rust makes it safe and easy to use references\")), mdx(\"p\", null, \"References are indicated by a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&\"), \".\"), mdx(\"h2\", {\n    \"id\": \"enums\"\n  }, \"Enums\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Enumerations\"), \", or just \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"enums\"), \", are types with a fixed set of values, called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"variants\"), \".\"), mdx(\"p\", null, \"Examples:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Result\"), \" types, with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ok\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Err\"), \" variants\")), mdx(\"h2\", {\n    \"id\": \"match-expression\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"match\"), \" expression\"), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"match\"), \" expression is made up of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"arms\"), \".\"), mdx(\"p\", null, \"Each arm consists of a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"pattern\"), \", and the code that should be run if the value given to the beginning of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"match\"), \" expression fits that arm's pattern.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rust takes the value given to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"match\"), \" and looks through each arm's pattern in turn\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"match\"), \" expression \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"returns\"), \" a value\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"for error handling, using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"match\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"expect\"), \" is one way of moving from crashing on an error to handling the error\")), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let guess: u32 = match guess.trim().parse() {\\n    Ok(num) => num,\\n    Err(_) => continue,\\n};\\n\")), mdx(\"h2\", {\n    \"id\": \"sources\"\n  }, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.rust-lang.org\"\n  }, \"https://www.rust-lang.org\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html\"\n  }, \"The Rust Programming Language Ch. 2: Programming a Guessing Game\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.youtube.com/watch?v=ohuTy8MmbLc\"\n  }, \"Rust in the Browser for JavaScripters: New Frontiers, New Possibilities\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"bff7d1a4-3518-5a12-940a-c125c880e96e","fields":{"slug":"/docs/rust","title":"Rust"}}}],"inboundReferences":[]},"fields":{"slug":"/docs/ownership-rust","title":"Ownership (Rust)"}}},"pageContext":{"id":"3def2448-1d24-57fb-80fa-6c13e6371361"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}