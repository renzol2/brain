{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/docs/np-hardness-proofs","result":{"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"computer-science algorithms computer np np-hard np-hardness\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"np-hardness-proofs\"\n  }, \"NP-Hardness Proofs\"), mdx(\"p\", null, \"Proving a problem $X$ is NP-hard requires several steps:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Choose a problem $Y$ that you already know is NP-hard\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Describe an algorithm to solve $Y$, using an algorithm for $X$ as a subroutine. Typically, this algorithm has the following form:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Given an instance of $Y$, \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/reduction-complexityorreduce\",\n    \"title\": \"reduction-complexity|reduce\"\n  }, \"[[reduction-complexity|reduce]]\"), \" it into an instance of $X$, and then call the magic black-box algorithm for $X$.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Prove\"), \" that your algorithm is correct. This always requires 2 separate steps, which are usually of the following form:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Prove\"), \" that your algorithm transforms \\\"good\\\" instances of $Y$ into \\\"good\\\" instances of $X$.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Prove\"), \" that your algorithm transforms \\\"bad\\\" instances of $Y$ into \\\"bad\\\" instances of $X$. Equivalently: Prove that if your transformation produces a \\\"good\\\" instance of $X$, then it was given a \\\"good\\\" instance of $Y$.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Argue that your algorithm for $Y$ runs in polynomial time. (This is usually trivial).\")), mdx(\"h2\", {\n    \"id\": \"sources\"\n  }, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://courses.engr.illinois.edu/cs374/fa2021/A/labs/lab12bis.pdf\"\n  }, \"CS 374 Lab 12.5\"))));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[],"inboundReferences":[]},"fields":{"slug":"/docs/np-hardness-proofs","title":"NP-Hardness Proofs"}}},"pageContext":{"id":"e3a85e48-8325-5e6e-9ceb-4edabcd8f103"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}