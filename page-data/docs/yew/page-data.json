{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/docs/yew","result":{"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"framework web-dev computer-science rust\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"yew\"\n  }, \"Yew\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Yew\"), \" is a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Rust\",\n    \"title\": \"Rust\"\n  }, \"[[Rust]]\"), \" framework for developing multi-threaded front-end web applications using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/WebAssembly\",\n    \"title\": \"WebAssembly\"\n  }, \"[[WebAssembly]]\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"features component-based framework, similar to React\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"minimizes \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/DOM\",\n    \"title\": \"DOM\"\n  }, \"[[DOM]]\"), \" \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/application-programming-interfaceorAPI\",\n    \"title\": \"application-programming-interface|API\"\n  }, \"[[application-programming-interface|API]]\"), \" calls to improve performance\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can operate alongside \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/JavaScript\",\n    \"title\": \"JavaScript\"\n  }, \"[[JavaScript]]\"), \" for use with npm packages\")), mdx(\"h2\", {\n    \"id\": \"sources\"\n  }, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://yew.rs\"\n  }, \"https://yew.rs\"))));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"computer-science programming-languages rust\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"rust\"\n  }, \"Rust\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#rust\"\n  }, \"Rust\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#types\"\n  }, \"Types\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#standard-library-std\"\n  }, \"Standard library (\", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"std\"), \")\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#variables\"\n  }, \"Variables\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#associated-functions\"\n  }, \"Associated Functions\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#references\"\n  }, \"References\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#enums\"\n  }, \"Enums\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#match-expression\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"match\"), \" expression\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#sources\"\n  }, \"Sources\"))))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Rust\"), \" is a programming language focused on delivering high performance with low-level access alongside an improved developer experience compared to existing low-level languages like C and C++.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"runs very fast\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"prevents memory leaks and segmentation faults\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"guarantees thread safety\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"stresses performance and correctness\")), mdx(\"p\", null, \"Can be compiled down to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/WebAssembly\",\n    \"title\": \"WebAssembly\"\n  }, \"[[WebAssembly]]\"), \" for use in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/client-side-renderingorclient-side\",\n    \"title\": \"client-side-rendering|client-side\"\n  }, \"[[client-side-rendering|client-side]]\"), \" web applications.\"), mdx(\"h2\", {\n    \"id\": \"types\"\n  }, \"Types\"), mdx(\"p\", null, \"Rust has a strong, static type system. However, it also has type inference.\"), mdx(\"p\", null, \"Number types:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"i32\"), \", a 32-\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/bit\",\n    \"title\": \"bit\"\n  }, \"[[bit]]\"), \" number\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"u32\"), \", an unsigned 32-bit number\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"useful for small, positive numbers\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"i64\"), \", a 64-bit number\")), mdx(\"h2\", {\n    \"id\": \"standard-library-std\"\n  }, \"Standard library (\", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"std\"), \")\"), mdx(\"p\", null, \"Rust's standard library has many useful packages:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"std::io\"), \" (input/output)\")), mdx(\"p\", null, \"Rust imports some packages automatically into every Rust program in the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"prelude\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"kept small as possible\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"contains things used in every Rust program, like \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"traits\"))), mdx(\"h2\", {\n    \"id\": \"variables\"\n  }, \"Variables\"), mdx(\"p\", null, \"See: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/variables-rustorVariables-(Rust)\",\n    \"title\": \"variables-rust|Variables (Rust)\"\n  }, \"[[variables-rust|Variables (Rust)]]\"), \"\"), mdx(\"h2\", {\n    \"id\": \"associated-functions\"\n  }, \"Associated Functions\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let mut guess = String::new();\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"::\"), \" syntax means that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new\"), \" is an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"associated function\"), \"\\nof the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \" type. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new\"), \" function creates a new, empty string. As a function, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new\"), \" is a common name across many types for a function that makes a new value of some kind.\"), mdx(\"h2\", {\n    \"id\": \"references\"\n  }, \"References\"), mdx(\"p\", null, \"A \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"reference\"), \" is a way to let multiple parts of the code access one piece of data without needing to copy that data into memory multiple times.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rust makes it safe and easy to use references\")), mdx(\"p\", null, \"References are indicated by a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&\"), \".\"), mdx(\"h2\", {\n    \"id\": \"enums\"\n  }, \"Enums\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Enumerations\"), \", or just \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"enums\"), \", are types with a fixed set of values, called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"variants\"), \".\"), mdx(\"p\", null, \"Examples:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Result\"), \" types, with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ok\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Err\"), \" variants\")), mdx(\"h2\", {\n    \"id\": \"match-expression\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"match\"), \" expression\"), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"match\"), \" expression is made up of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"arms\"), \".\"), mdx(\"p\", null, \"Each arm consists of a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"pattern\"), \", and the code that should be run if the value given to the beginning of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"match\"), \" expression fits that arm's pattern.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rust takes the value given to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"match\"), \" and looks through each arm's pattern in turn\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"match\"), \" expression \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"returns\"), \" a value\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"for error handling, using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"match\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"expect\"), \" is one way of moving from crashing on an error to handling the error\")), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let guess: u32 = match guess.trim().parse() {\\n    Ok(num) => num,\\n    Err(_) => continue,\\n};\\n\")), mdx(\"h2\", {\n    \"id\": \"sources\"\n  }, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.rust-lang.org\"\n  }, \"https://www.rust-lang.org\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html\"\n  }, \"The Rust Programming Language Ch. 2: Programming a Guessing Game\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.youtube.com/watch?v=ohuTy8MmbLc\"\n  }, \"Rust in the Browser for JavaScripters: New Frontiers, New Possibilities\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"bff7d1a4-3518-5a12-940a-c125c880e96e","fields":{"slug":"/docs/rust","title":"Rust"}}},{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"computer-science web-dev javascript programming-languages\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"webassembly\"\n  }, \"WebAssembly\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WebAssembly\"), \" (or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Wasm\"), \") is a low-level language in binary format that runs on the web with near-native performance.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"for stack-based virtual machine\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"designed as a portable compilation format for several programming languages, especially low-level languages like C, C++, and \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Rust\",\n    \"title\": \"Rust\"\n  }, \"[[Rust]]\"), \"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can be run alongside \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/JavaScript\",\n    \"title\": \"JavaScript\"\n  }, \"[[JavaScript]]\"), \"\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can be deployed to client or server web applications\")), mdx(\"h2\", {\n    \"id\": \"sources\"\n  }, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://webassembly.org\"\n  }, \"https://webassembly.org\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/WebAssembly\"\n  }, \"https://developer.mozilla.org/en-US/docs/WebAssembly\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"f7a5a51b-306e-5c72-80df-ddad46503baa","fields":{"slug":"/docs/webassembly","title":"WebAssembly"}}},{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"web-dev web-rendering computer-science computer\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"dom\"\n  }, \"DOM\"), mdx(\"p\", null, \"Document Object Model (DOM)\"), mdx(\"p\", null, \"TODO: take more notes\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"c27e3eff-7ebc-509a-a45a-2fc223085f45","fields":{"slug":"/docs/dom","title":"DOM"}}},{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"web-dev computer-science computer programming-languages javascript\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"javascript\"\n  }, \"JavaScript\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"JavaScript\"), \" is a high-level programming language originally written to be used in browsers for web development.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"2c3ea84d-cfea-541b-82a8-b63b3f62af4c","fields":{"slug":"/docs/javascript","title":"JavaScript"}}}],"inboundReferences":[]},"fields":{"slug":"/docs/yew","title":"Yew"}}},"pageContext":{"id":"2c8b9527-85d3-5321-96fd-507e3be2ee56"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}