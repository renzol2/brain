{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/docs/data-types-rust","result":{"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": null\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"data-types-rust\"\n  }, \"Data Types (Rust)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#data-types-rust\"\n  }, \"Data Types (Rust)\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#scalar-types\"\n  }, \"Scalar Types\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#integer-types\"\n  }, \"Integer Types\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#floating-point-types\"\n  }, \"Floating-Point Types\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#numeric-operations\"\n  }, \"Numeric Operations\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#boolean-type\"\n  }, \"Boolean Type\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#character-type\"\n  }, \"Character Type\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#compound-types\"\n  }, \"Compound Types\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#tuples\"\n  }, \"Tuples\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#arrays\"\n  }, \"Arrays\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#sources\"\n  }, \"Sources\"))))), mdx(\"p\", null, \"Rust is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"statically typed\"), \", meaning the compiler must know the data type of all \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/variables-rustorvariables\",\n    \"title\": \"variables-rust|variables\"\n  }, \"[[variables-rust|variables]]\"), \" at compile time. However, the compiler can infer the type of most variables through \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"type inference\"), \".\"), mdx(\"p\", null, \"In \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Rust\",\n    \"title\": \"Rust\"\n  }, \"[[Rust]]\"), \", there are two kinds of data types: \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"scalar\"), \" types and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"compound\"), \" types.\"), mdx(\"h2\", {\n    \"id\": \"scalar-types\"\n  }, \"Scalar Types\"), mdx(\"p\", null, \"A scalar type represents a single value. Rust has four primary scalar types:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/integer-types-rustorInteger-Types\",\n    \"title\": \"integer-types-rust|Integer Types\"\n  }, \"[[integer-types-rust|Integer Types]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"floating-point numbers\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Booleans\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"characters\")), mdx(\"h3\", {\n    \"id\": \"integer-types\"\n  }, \"Integer Types\"), mdx(\"p\", null, \"See: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/integer-types-rustorInteger-Types-(Rust)\",\n    \"title\": \"integer-types-rust|Integer Types (Rust)\"\n  }, \"[[integer-types-rust|Integer Types (Rust)]]\"), \"\"), mdx(\"h3\", {\n    \"id\": \"floating-point-types\"\n  }, \"Floating-Point Types\"), mdx(\"p\", null, \"Rust has two primitive types for floating point numbers (numbers with decimal points).\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"f32\"), \" (32 bits in size)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"f64\"), \" (64 bits in size)\")), mdx(\"p\", null, \"The default type is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"f64\"), \" because modern CPUs handle 64-bit floating point numbers at roughly the same speed as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"f32\"), \", but with the bonus of having more precision in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"f64\"), \".\"), mdx(\"h3\", {\n    \"id\": \"numeric-operations\"\n  }, \"Numeric Operations\"), mdx(\"p\", null, \"Rust supports basic numeric operations, including integer division:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"fn main() {\\n    // addition\\n    let sum = 5 + 10;\\n\\n    // subtraction\\n    let difference = 95.5 - 4.3;\\n\\n    // multiplication\\n    let product = 4 * 30;\\n\\n    // division\\n    let quotient = 56.7 / 32.2;\\n    let floored = 2 / 3; // Results in 0\\n\\n    // remainder\\n    let remainder = 43 % 5;\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"boolean-type\"\n  }, \"Boolean Type\"), mdx(\"p\", null, \"The Boolean type in Rust, specified as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bool\"), \", has two possible values: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"fn main() {\\n    let t = true;\\n\\n    let f: bool = false;  // with explicit type annotation\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"character-type\"\n  }, \"Character Type\"), mdx(\"p\", null, \"Rust's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"char\"), \" type is the most primitive alphabetic type.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"char\"), \" type is four \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/byte\",\n    \"title\": \"byte\"\n  }, \"[[byte]]\"), \"s in size and represents a Unicode Scalar Value, allowing for many types of characters past ASCII:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"accented letters, Chinese, Japanese, Korean, emojis, zero-width spaces\")))), mdx(\"h2\", {\n    \"id\": \"compound-types\"\n  }, \"Compound Types\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Compound types\"), \" group multiple values into one type. Rust has two primitive compound types: \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"tuples\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"arrays\"), \".\"), mdx(\"h3\", {\n    \"id\": \"tuples\"\n  }, \"Tuples\"), mdx(\"p\", null, \"A tuple is a general way of grouping together a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fixed number\"), \" of values \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"of a variety of types\"), \" into one compound type.\"), mdx(\"p\", null, \"Accessing values from a tuple can be done in two ways:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"destructuring\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"period (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".\"), \") followed by index of value to access\")), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"fn main() {\\n    let tup: (i32, f64, u8) = (500, 6.4, 1);\\n\\n    // Destructuring\\n    let (x, y, z) = tup;\\n\\n    // Period access\\n    let five_hundred = tup.0;\\n    let six_point_four = tup.1;\\n}\\n\")), mdx(\"p\", null, \"A tuple without any values, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"()\"), \", s a special type that has only one value, also written \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"()\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the type is called the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"unit type\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the value is called the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"unit value\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rust expressions implicitly return the unit value if they don't return anything else\")), mdx(\"h3\", {\n    \"id\": \"arrays\"\n  }, \"Arrays\"), mdx(\"p\", null, \"Arrays are \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fixed length\"), \" collections of multiple values \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"of the same type\"), \". They are single chunks of memory allocated on the stack.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"fn main() {\\n    let a = [1, 2, 3, 4, 5];\\n}\\n\")), mdx(\"p\", null, \"Benefits of arrays:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"useful for allocating data on the stack, rather than the heap\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"useful to ensure you always have a fixed number of identical-type elements\")), mdx(\"p\", null, \"Declaring an array's type and length explicitly:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let a: [i32; 5] = [1, 2, 3, 4, 5];\\n\")), mdx(\"p\", null, \"Declaring an array of type and identical elements:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"// These are equivalent statements\\nlet a = [3; 5];\\nlet a = [3, 3, 3, 3, 3];\\n\")), mdx(\"p\", null, \"Array elements can be accessed by indexing using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[]\"), \" notation. If an out-of-bounds index is attempted to be accessed, the program terminates in a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"runtime\"), \" error, rather than accessing unsafe memory (i.e. unlike C or C++).\"), mdx(\"h2\", {\n    \"id\": \"sources\"\n  }, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://doc.rust-lang.org/book/ch03-02-data-types.html#integer-types\"\n  }, \"https://doc.rust-lang.org/book/ch03-02-data-types.html#integer-types\"))));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"computer-science programming-languages rust\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"rust\"\n  }, \"Rust\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#rust\"\n  }, \"Rust\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#types\"\n  }, \"Types\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#standard-library-std\"\n  }, \"Standard library (\", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"std\"), \")\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#variables\"\n  }, \"Variables\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#associated-functions\"\n  }, \"Associated Functions\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#references\"\n  }, \"References\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#enums\"\n  }, \"Enums\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#match-expression\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"match\"), \" expression\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#sources\"\n  }, \"Sources\"))))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Rust\"), \" is a programming language focused on delivering high performance with low-level access alongside an improved developer experience compared to existing low-level languages like C and C++.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"runs very fast\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"prevents memory leaks and segmentation faults\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"guarantees thread safety\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"stresses performance and correctness\")), mdx(\"p\", null, \"Can be compiled down to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/WebAssembly\",\n    \"title\": \"WebAssembly\"\n  }, \"[[WebAssembly]]\"), \" for use in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/client-side-renderingorclient-side\",\n    \"title\": \"client-side-rendering|client-side\"\n  }, \"[[client-side-rendering|client-side]]\"), \" web applications.\"), mdx(\"h2\", {\n    \"id\": \"types\"\n  }, \"Types\"), mdx(\"p\", null, \"Rust has a strong, static type system. However, it also has type inference.\"), mdx(\"p\", null, \"Number types:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"i32\"), \", a 32-\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/bit\",\n    \"title\": \"bit\"\n  }, \"[[bit]]\"), \" number\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"u32\"), \", an unsigned 32-bit number\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"useful for small, positive numbers\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"i64\"), \", a 64-bit number\")), mdx(\"h2\", {\n    \"id\": \"standard-library-std\"\n  }, \"Standard library (\", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"std\"), \")\"), mdx(\"p\", null, \"Rust's standard library has many useful packages:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"std::io\"), \" (input/output)\")), mdx(\"p\", null, \"Rust imports some packages automatically into every Rust program in the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"prelude\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"kept small as possible\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"contains things used in every Rust program, like \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"traits\"))), mdx(\"h2\", {\n    \"id\": \"variables\"\n  }, \"Variables\"), mdx(\"p\", null, \"See: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/variables-rustorVariables-(Rust)\",\n    \"title\": \"variables-rust|Variables (Rust)\"\n  }, \"[[variables-rust|Variables (Rust)]]\"), \"\"), mdx(\"h2\", {\n    \"id\": \"associated-functions\"\n  }, \"Associated Functions\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let mut guess = String::new();\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"::\"), \" syntax means that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new\"), \" is an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"associated function\"), \"\\nof the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \" type. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new\"), \" function creates a new, empty string. As a function, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new\"), \" is a common name across many types for a function that makes a new value of some kind.\"), mdx(\"h2\", {\n    \"id\": \"references\"\n  }, \"References\"), mdx(\"p\", null, \"A \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"reference\"), \" is a way to let multiple parts of the code access one piece of data without needing to copy that data into memory multiple times.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rust makes it safe and easy to use references\")), mdx(\"p\", null, \"References are indicated by a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&\"), \".\"), mdx(\"h2\", {\n    \"id\": \"enums\"\n  }, \"Enums\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Enumerations\"), \", or just \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"enums\"), \", are types with a fixed set of values, called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"variants\"), \".\"), mdx(\"p\", null, \"Examples:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Result\"), \" types, with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ok\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Err\"), \" variants\")), mdx(\"h2\", {\n    \"id\": \"match-expression\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"match\"), \" expression\"), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"match\"), \" expression is made up of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"arms\"), \".\"), mdx(\"p\", null, \"Each arm consists of a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"pattern\"), \", and the code that should be run if the value given to the beginning of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"match\"), \" expression fits that arm's pattern.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rust takes the value given to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"match\"), \" and looks through each arm's pattern in turn\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"match\"), \" expression \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"returns\"), \" a value\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"for error handling, using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"match\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"expect\"), \" is one way of moving from crashing on an error to handling the error\")), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let guess: u32 = match guess.trim().parse() {\\n    Ok(num) => num,\\n    Err(_) => continue,\\n};\\n\")), mdx(\"h2\", {\n    \"id\": \"sources\"\n  }, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.rust-lang.org\"\n  }, \"https://www.rust-lang.org\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html\"\n  }, \"The Rust Programming Language Ch. 2: Programming a Guessing Game\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.youtube.com/watch?v=ohuTy8MmbLc\"\n  }, \"Rust in the Browser for JavaScripters: New Frontiers, New Possibilities\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"bff7d1a4-3518-5a12-940a-c125c880e96e","fields":{"slug":"/docs/rust","title":"Rust"}}},{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"mus-407 ece-402 computer-science\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"byte\"\n  }, \"Byte\"), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"byte\"), \" is a digital unit of information commonly consisting of eight \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/bit\",\n    \"title\": \"bit\"\n  }, \"[[bit]]\"), \"s.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the size of a byte has been historically dependent on hardware\")), mdx(\"h2\", {\n    \"id\": \"sources\"\n  }, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://en.wikipedia.org/wiki/Byte\"\n  }, \"https://en.wikipedia.org/wiki/Byte\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"fda733e0-5354-59a6-9e50-13430b8857d0","fields":{"slug":"/docs/byte","title":"Byte"}}}],"inboundReferences":[]},"fields":{"slug":"/docs/data-types-rust","title":"Data Types (Rust)"}}},"pageContext":{"id":"72f95917-8186-5d22-9763-00c419f3dbbd"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}