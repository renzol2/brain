{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/docs/wave-interference","result":{"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"mus-407 waves wave-phenomena\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"wave-interference\"\n  }, \"Wave Interference\"), mdx(\"p\", null, \"By the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/linear-superpositionorprinciple-of-linear-superposition\",\n    \"title\": \"linear-superposition|principle of linear superposition\"\n  }, \"[[linear-superposition|principle of linear superposition]]\"), \", all waves (including \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/sound-wavesorsound-waves\",\n    \"title\": \"sound-waves|sound waves\"\n  }, \"[[sound-waves|sound waves]]\"), \") experience interference.\"), mdx(\"h2\", {\n    \"id\": \"constructive-interference\"\n  }, \"Constructive interference\"), mdx(\"p\", null, \"Two compressions sum to create a greater compression.\"), mdx(\"p\", null, \"Two rarefactions sum to create a greater rarefaction.\"), mdx(\"h2\", {\n    \"id\": \"destructive-interference\"\n  }, \"Destructive interference\"), mdx(\"p\", null, \"A compression & rarefaction partially or completely cancel each other\"), mdx(\"p\", null, \"Pressure at a point where multiple sound waves exist equals the sum of pressures of individual waves at that point.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pressure A + pressure B = pressure A + B\")), mdx(\"p\", null, \"What you perceive (hear) is the sum of all the sound waves reaching your ear. Our brain can parse that information and identify sources.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A microphone, however, can only perceive a single volume\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Linear superposition explains why we can perceive multiple notes, instruments, waves, etc. even when audio files only exhibit one pressure measurement per sample\")));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[],"inboundReferences":[]},"fields":{"slug":"/docs/wave-interference","title":"Wave Interference"}}},"pageContext":{"id":"52bdf0ac-7713-59d2-ba60-1a4990b08ce6"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}