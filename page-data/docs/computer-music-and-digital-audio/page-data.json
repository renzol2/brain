{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/docs/computer-music-and-digital-audio","result":{"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"music mus-407 uiuc electroacoustic computer digital audio\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"computer-music-and-digital-audio\"\n  }, \"Computer Music and Digital Audio\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"MUS 407: Electroacoustic Music Techniques I\")), mdx(\"h2\", {\n    \"id\": \"history-of-computer-music\"\n  }, \"History of Computer Music\"), mdx(\"p\", null, \"See: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/MUSIC-N\",\n    \"title\": \"MUSIC-N\"\n  }, \"[[MUSIC-N]]\"), \"\"), mdx(\"h3\", {\n    \"id\": \"early-computer-music-at-illinois\"\n  }, \"Early Computer Music at Illinois\"), mdx(\"p\", null, \"1957, Illinois faculty \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Lejaren Hiller\"), \" & \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Leonard Isaacson\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"both chemists/composers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"created the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Illiac Suite\"), \", a four-movement string quartet\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"first musical score to be generated by a computer using the ILLIAC I (Illinois Automatic Computer), built/acquired in 1952\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"first computer at the U of I; 2.8k vacuum tubes, 10ft tall, 5 ton weight\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"components currently on display in Siebel Center lobby\")), mdx(\"p\", null, \"Two important academic centers founded ca. 1957-1958:\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"University of Illinois Experimental Studios\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"founded by Lejaren Hiller\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"initially focused on computer music composition, later expanding into analog tape-based composition and other areas\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Columbia-Princeton Electronic Music Center\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"founded by Otto Luening & Vladimir Ussachevsky (Columbia), Milton Babbit & Roger Sessions (Princeton)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"initially focused on analog tape-based composition, later expanding into computer music and other areas\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"notable collaboration with Bell Labs\")), mdx(\"p\", null, \"Two more computer music centers established in the 1970s:\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IRCAM\"), \": Institut de Recherche et Coordination Acoustique/Musique\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"est. Paris, 1970, by Pierre Boulez\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CCRMA\"), \": Center for Computer Research in Music and Acoustics\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"est. Stanford University, CA, 1976, by John Chowning and Leland Smith\")), mdx(\"p\", null, \"Both are still active hubs for electroacoustic/computer music today.\"), mdx(\"h2\", {\n    \"id\": \"digital-audio-concepts\"\n  }, \"Digital Audio Concepts\"), mdx(\"h3\", {\n    \"id\": \"digital-audio-key-terms\"\n  }, \"Digital Audio Key Terms\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sampling\"), \": the process of periodically measuring the amplitude of an analog signal and assigning a digital value to each measurement (see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/sampling\",\n    \"title\": \"sampling\"\n  }, \"[[sampling]]\"), \")\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sample rate\"), \": number of samples taken per second\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"quantization\"), \": the process of approximating the measured analog value to the closest digital value\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"bit depth\"), \": the number of discrete digital values available for quantization (also called sample resolution or sample width)\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ADC\"), \": analog-to-digital converter\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DAC\"), \": digital-to-analog converter\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sampling theorem\"), \": publication on the mathematical limitations of discretization of continuous signals\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Harry Nyquist, 1928\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"also called Nyquist Theorem or Shannon-Nyquist Theorem\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pulse code modulation (PCM)\"), \": specification for computer digitization of continuous signals\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"patented by Alec Reeves, 1938\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"became one of the primary standardizations for digital representation of analog signals\")), mdx(\"h3\", {\n    \"id\": \"sampling-disambiguation\"\n  }, \"Sampling (disambiguation)\"), mdx(\"p\", null, \"Sampling can have different meanings, depending on context.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Using a significant portion of an existing work as a component in a new work\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Recording individual sound units from a musical instrument or other sound source, typically mapped to physical controls on a MIDI device and played back\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"taking periodic measurements of an analog signal\"))), mdx(\"h2\", {\n    \"id\": \"sampling\"\n  }, \"Sampling\"), mdx(\"p\", null, \"See: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/SAMPLING\",\n    \"title\": \"SAMPLING\"\n  }, \"[[SAMPLING]]\"), \"\"));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"computer music software composition\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"music-n\"\n  }, \"MUSIC-N\"), mdx(\"h2\", {\n    \"id\": \"beginnings\"\n  }, \"Beginnings\"), mdx(\"p\", null, \"Early developments at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Bell Telephone Laboratories\"), \", NJ, early 1950s\"), mdx(\"p\", null, \"In 1957, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Max Mathews\"), \" created and oversaw the first sound-generating computer program, called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MUSIC\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"triangle wave only\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"no control over envelope transients or timbre\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"only pitch, loudness, and duration were controllable\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\\"it was terrible\\\" - Max Mathews\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Max (1926-2011) is also namesake of eponymous Max/MSP software\")), mdx(\"p\", null, \"See: 17-second composition by Newman Guttman (Bell Labs linguist/acoustician) titled \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"In the Silver Scale\")), mdx(\"p\", null, \"See: IBM 704 Computer, on which the MUSIC program ran\"), mdx(\"p\", null, \"Punch cards were used for programming early computers. FORTRAN statements were written on punch cards and then processed by the computer.\"), mdx(\"h2\", {\n    \"id\": \"continued-development\"\n  }, \"Continued Development\"), mdx(\"p\", null, \"Mathews & others continued developing MUSIC\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"MUSIC II\"), \" (1958), capable of four simultaneous voices, 16 possible waveforms\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"MUSIC III\"), \" (1960), introduction of 'unit generators', more modularity\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"MUSIC IV (1962), 'orchestra/score' paradigm, strongly resembling modern-day descendent, \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"CSound\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Orchestra: define voices and their timbres\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Score: define notes for each voice\")))), mdx(\"p\", null, \"1960s integrated circuits (ICs) and microprocessor revolution necessitated substantial rewrites\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MUSIC V\"), \" (1966) written in Fortran, earlier version written in Assembly.\"), mdx(\"p\", null, \"Later versions: MUSIC 10, MUSIC 11, MUSIC 360 (Barry Vercoe, 1968)\"), mdx(\"p\", null, \"Collectively known as the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MUSIC-N\"), \" family of programming languages.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"../attachments/csound-example.png\",\n    \"alt\": \"CSound example\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"0791439e-593d-5879-826f-20339566f5e5","fields":{"slug":"/docs/music-n","title":"MUSIC-N"}}},{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"music mus-407 uiuc electroacoustic computer digital audio sampling sample-rate bit-depth sample dynamic-range quantization\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"sampling\"\n  }, \"Sampling\"), mdx(\"p\", null, \"Sampling involves taking periodic measurements of an analog signal and assigning a digital value to each measurement.\"), mdx(\"h2\", {\n    \"id\": \"sample-rate\"\n  }, \"Sample Rate\"), mdx(\"p\", null, \"Sampling occurs at one of several standardized sampling rates:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Sample Rate (samples/second)\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"32000\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"only used in radio and transmission applications\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"441001\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"44.1 standard for CD-quality audio\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"48000\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"44.1 and 48 common for many applications\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"88200\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"adopted by many professional studios and industries\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"96000\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"adopted by many professional studios and industries\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"176400\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"adopted by many professional studios and industries\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"192000\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"adopted by many professional studios and industries, 4x the standard \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"48000\"), \" sample rate\")))), mdx(\"p\", null, \"Sampling is an inherently \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"discrete\"), \" process.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No knowledge of what happens in-between samples; this data is necessarily lost\")), mdx(\"h2\", {\n    \"id\": \"bit-depth\"\n  }, \"Bit Depth\"), mdx(\"p\", null, \"Bit depth determines the number of bits used to represent each sample\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"i.e. the number of available resolution points to which a measured analog value can be approximated\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"1 byte = 8 bits\")), mdx(\"p\", null, \"Number of resolution points = $2^{\\\\text{bit depth}}$\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"1\"), \"-bit system; 2 resolution points\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"2\"), \"-bit system; 4 resolution points\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"8\"), \"-bit system; 256 resolution points\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"16\"), \"-bit system; 65536 resolution points (1 byte per sample)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"32\"), \"-bit system; a lot of resolution points (4 bytes per sample)\")), mdx(\"p\", null, \"Consider the analog-to-digital conversion process in a 3-bit system:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"../attachments/analog-to-digital-conversion-3-bit.png\",\n    \"alt\": \"Analog-to-digital conversion process in a 3-bit system\"\n  })), mdx(\"p\", null, \"The amplitude of each sample is quantized to a particular bit and encoded into binary. We then encode the binary into a modulated pulse wave.\"), mdx(\"h2\", {\n    \"id\": \"the-nyquist-frequency\"\n  }, \"The Nyquist Frequency\"), mdx(\"p\", null, \"The sampling theorem's primary consequence of digital audio:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the highest frequency that can be represented in a digital system is equal to half the sampling rate\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"this frequency is called the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Nyquist Frequency\"), \":\")), mdx(\"p\", null, \"$N = \\\\frac{SR}{2}$\"), mdx(\"p\", null, \"If a frequency $> N$ is sampled, the frequency of its digital representation will appear between 0 and $N$ Hz. This phenomenon is called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"aliasing\"), \" or \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"foldover\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"input frequency will \\\"reflect\\\" off of \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"zero\"), \" and $N$ if boundary is exceeded\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"similar to \\\"negative frequencies\\\" in modulation synthesis\")), mdx(\"p\", null, \"Imagine a sampled analog input with spectral content above $N$.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Foldover occurs as the waveform is sampled\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Results in unnecessary and/or unwanted interference (either constructive or destructive)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Alias frequencies interfere/sum with sub-$N$ frequencies, altering the spectrum\")), mdx(\"h2\", {\n    \"id\": \"adcdac-conversion-process\"\n  }, \"ADC/DAC Conversion Process\"), mdx(\"p\", null, \"An ADC includes an \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"anti-alias filter\"), \", which removes analog frequency components that would cause aliasing.\"), mdx(\"p\", null, \"A DAC includes a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"smoothing filter\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"reconstruction of an analog signal from raw digital data results in waveform discontinuities (\\\"staircase\\\" shape)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"without smoothing, these artifacts produce audible high frequency content\")), mdx(\"p\", null, \"Both classify as low-pass filter whose cutoff frequency is at or near the Nyquist Frequency.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Aliasing\"), \" in general does not exist just in audio, but in \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"anything\"), \" digital.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"think: pixels on a screen\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"in this case, \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"resolution\"), \" of a digital image is similar to \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"sample rate\"), \" of digital audio\")), mdx(\"h2\", {\n    \"id\": \"quantization-error-and-dynamic-range\"\n  }, \"Quantization Error and Dynamic Range\"), mdx(\"p\", null, \"The discrepancy between an analog signal's true value and its quantized approximation is called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"quantization error.\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the amount of rounding we had to do to fit the samples into our digital recording system\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"quantization error is heard as noise in the digital signal\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"quantization is effectively adding a small random value to the original value of a sample - over many samples, this comes off as noise\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"noise itself is just random values in the digital realm\")))), mdx(\"p\", null, \"greater bit depth --> higher sample resolution --> smaller quantization error --> better signal-to-noise ratio\"), mdx(\"p\", null, \"Bit depth determines the maximum \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"dynamic range\"), \" of a digital audio signal.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"16\"), \"-bits gives us 96 dB to work\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"24\"), \"-bits gives us 120-something dB\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Our pain threshold goes up to 120-something dB, so we don't need to raise the bit depth past something like \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"16\"), \"-bits.\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dynamic range (dB) ~= 6 x bit depth\"), \", e.g. an 8-bit system provides 48 dB of dynamic range\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"signals at or below -48 dBFS will be unresolvable from the noise floor\")), mdx(\"p\", null, \"Reducing the bit depth, and therefore dynamic range, does \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"not\"), \" reduce the number of samples taken (the sample rate). We can still represent high frequency content, but reducing the bit depth reduces the dynamic range at which we can represent the audio content.\"), mdx(\"h2\", {\n    \"id\": \"dither\"\n  }, \"Dither\"), mdx(\"p\", null, \"Periodic signals exhibit a regular, predictable pattern of quantization error.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"smooth signals take on a more square-like appearance\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"low amplitude signals have access to fewer resolution points, and are therefore particularly prone\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"results in additional high-frequency components in the spectrum, also called harmonic distortion\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Dither\"), \" is a small amount of low-level noise added to an analog signal, prior to sampling/quantization, in order to randomize (and therefore eliminate) quantization error.\"), mdx(\"p\", null, \"Think: \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"dithering\"), \" option when exporting audio\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"spreads quantization noise more evenly throughout the spectrum\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"often used when converting from higher bit depths down to 16-bit\")), mdx(\"h2\", {\n    \"id\": \"digital-audio-standards\"\n  }, \"Digital Audio Standards\"), mdx(\"p\", null, \"The compact disc stores 16-bit audio at 44100 samples per second.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"dynamic range = 96 dB, N = 22050\")), mdx(\"p\", null, \"Many professional studios work with 24- or 32-bit audio at 192000 samples per second\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"dynamic range = 144/192 dB, N = 96000\")), mdx(\"p\", null, \"Higher sample rates/bit depths consume significantly more memory.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Are the higher specs worth it?\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"613f61fb-c7c2-58d9-a9a1-d4dcea01a663","fields":{"slug":"/docs/sampling","title":"Sampling"}}}],"inboundReferences":[{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"renzos-foam\"\n  }, \"renzo's foam\"), mdx(\"p\", null, \"welcome to my foam! i want to publish my class notes here as a way to keep myself accountable for \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"learning\"), \" and really retaining the information, whether that be in class or in my own time.\"), mdx(\"p\", null, \"this is also a way to put my own knowledge out in public for everyone to see and benefit from.\"), mdx(\"p\", null, \"this is a huge WIP but feel free to look around!\"), mdx(\"p\", null, \"as a starting point, try going to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/computer-music-and-digital-audio\",\n    \"title\": \"computer-music-and-digital-audio\"\n  }, \"[[computer-music-and-digital-audio]]\"), \"\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"06da7602-de9f-5ec9-9a68-0efc2d96b75f","fields":{"slug":"/readme","title":"renzo's foam"}}}]},"fields":{"slug":"/docs/computer-music-and-digital-audio","title":"Computer Music and Digital Audio"}}},"pageContext":{"id":"5a48284a-64a4-5d4a-b183-17a794131cf9"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}