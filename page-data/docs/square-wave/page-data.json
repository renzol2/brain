{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/docs/square-wave","result":{"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"ece-402 mus-407 waves\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"square-wave\"\n  }, \"Square Wave\"), mdx(\"p\", null, \"A \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"square wave\"), \" is a periodic waveform characterized by its square-like shape and binary, discrete nature.\"), mdx(\"h2\", {\n    \"id\": \"sound\"\n  }, \"Sound\"), mdx(\"p\", null, \"A square wave is formed by summing only the odd \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/partial\",\n    \"title\": \"partial\"\n  }, \"[[partial]]\"), \"s of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/harmonic-seriesorharmonic-series\",\n    \"title\": \"harmonic-series|harmonic series\"\n  }, \"[[harmonic-series|harmonic series]]\"), \", where each of the odd harmonic's \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/amplitude\",\n    \"title\": \"amplitude\"\n  }, \"[[amplitude]]\"), \" is inversely proportional to its frequency.\"), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/timbre\",\n    \"title\": \"timbre\"\n  }, \"[[timbre]]\"), \" of a square wave is distinctly hollow, like a clarinet or closed-end organ pipe\"), mdx(\"h2\", {\n    \"id\": \"sources\"\n  }, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://www.till.com/articles/squares/\"\n  }, \"http://www.till.com/articles/squares/\"))));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"ece-402 mus-407 spectrum\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"partial\"\n  }, \"Partial\"), mdx(\"p\", null, \"A \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"partial\"), \" is a pure \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/frequency\",\n    \"title\": \"frequency\"\n  }, \"[[frequency]]\"), \" component of an overall \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/spectrum\",\n    \"title\": \"spectrum\"\n  }, \"[[spectrum]]\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"usually depicted as a \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/sine-waveorsine-wave\",\n    \"title\": \"sine-wave|sine wave\"\n  }, \"[[sine-wave|sine wave]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"in a spectrum, the fundamental and its overtones are all partials\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"ea689507-b7f0-54dd-a198-88e149d29d66","fields":{"slug":"/docs/partial","title":"Partial"}}},{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"mus-407 sound sound-properties amplitude\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"amplitude\"\n  }, \"Amplitude\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Amplitude\"), \" measures deviation of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"pressure\"), \" or displacement from rest/equilibrium\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a broad, generic term\")), mdx(\"p\", null, \"Acoustic \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"power\"), \", measured in Watts (W) measures the rate at which energy is converted (Joules per second)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"commonly indicated on signal amplifiers\")), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/sound-wavesorSound\",\n    \"title\": \"sound-waves|Sound\"\n  }, \"[[sound-waves|Sound]]\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"intensity\"), \" measures power distributed over a unit area\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"power measures sound strength irrespective of source/listener locations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"intensity varies depending on distance between source and listener\")), mdx(\"p\", null, \"Sound intensity is proportional to sound pressured squared\"), mdx(\"p\", null, \"$10^{12}$ \\u2192 the ratio of the greatest intensity we can tolerate to the smallest intensity we can perceive\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"annoyingly large range of numbers to work with, resulting in the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/decibel\",\n    \"title\": \"decibel\"\n  }, \"[[decibel]]\"), \" unit\")), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/envelopeorEnvelopes\",\n    \"title\": \"envelope|Envelopes\"\n  }, \"[[envelope|Envelopes]]\"), \" are used to describe amplitude over time.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"8af8bf56-6f25-5556-b65a-eb1a38b12763","fields":{"slug":"/docs/amplitude","title":"Amplitude"}}},{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"ece-402 timbre\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"timbre\"\n  }, \"Timbre\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Timbre\"), \" is the \\\"color\\\" or quality of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/sound-wavesorsounds\",\n    \"title\": \"sound-waves|sounds\"\n  }, \"[[sound-waves|sounds]]\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"related to \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/sound-wavesorsound\",\n    \"title\": \"sound-waves|sound\"\n  }, \"[[sound-waves|sound]]\"), \" quality\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"specified by qualitative adjectives (e.g. bright or dull)\")), mdx(\"h2\", {\n    \"id\": \"perception\"\n  }, \"Perception\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Timbre is \\\"attribute of auditory sensation in terms of which a listener can judge that two sounds are dissimilar, when the two sounds are similarly presented having the same loudness, pitch, and duration.\\\" (Acoustical Society of America, ASA).\")), mdx(\"p\", null, \"Timbre is usually separated conceptually from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/pitch\",\n    \"title\": \"pitch\"\n  }, \"[[pitch]]\"), \" and loudness.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"our ability to distinguish between sounds relies on our perception of a sound's timbre over time\")), mdx(\"h2\", {\n    \"id\": \"analysis\"\n  }, \"Analysis\"), mdx(\"p\", null, \"There are several ways of analyzing timbre, including\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the concept of the \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/timbre-spaceorTimbre-Space\",\n    \"title\": \"timbre-space|Timbre Space\"\n  }, \"[[timbre-space|Timbre Space]]\"), \" by John M. Grey\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the use of \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/spectral-analysisorspectral-analysis\",\n    \"title\": \"spectral-analysis|spectral analysis\"\n  }, \"[[spectral-analysis|spectral analysis]]\"), \" to produce a \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/spectrum\",\n    \"title\": \"spectrum\"\n  }, \"[[spectrum]]\"), \"\")), mdx(\"h2\", {\n    \"id\": \"sources\"\n  }, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://asastandards.org/Terms/timbre/\"\n  }, \"https://asastandards.org/Terms/timbre/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://ccrma.stanford.edu/files/papers/stanm2.pdf\"\n  }, \"https://ccrma.stanford.edu/files/papers/stanm2.pdf\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"a072815e-f6bf-5e42-89e9-f9a22beadbd0","fields":{"slug":"/docs/timbre","title":"Timbre"}}}],"inboundReferences":[]},"fields":{"slug":"/docs/square-wave","title":"Square Wave"}}},"pageContext":{"id":"1b71d2ab-3bb2-5c09-8483-87bd3d80461f"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}