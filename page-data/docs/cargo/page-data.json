{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/docs/cargo","result":{"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"rust computer-science programming-languages\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"cargo\"\n  }, \"Cargo\"), mdx(\"p\", null, \"Cargo is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Rust\",\n    \"title\": \"Rust\"\n  }, \"[[Rust]]\"), \"'s build system and package manager.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"helps manage Rust projects by building code, downloading library dependencies, and building external libraries in packages called \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"crates\"))), mdx(\"h2\", {\n    \"id\": \"crates\"\n  }, \"Crates\"), mdx(\"p\", null, \"Crates can be classified into a few types:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"binary crate\"), \", an executable\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"library crates\"), \", which contain code intended to be used in other programs\")), mdx(\"p\", null, \"Crates are specified under the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[dependencies]\"), \" line in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cargo.toml\"), \", where versions are specified with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/semantic-versioningorSemantic-Versioning\",\n    \"title\": \"semantic-versioning|Semantic Versioning\"\n  }, \"[[semantic-versioning|Semantic Versioning]]\"), \".\"), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cargo build\"), \" - build a project\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cargo run\"), \" - build and run a project\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cargo check\"), \" - build a project without producing a binary to check for errors\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cargo build --release\"), \" - compile project with optimizations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cargo update\"), \" - update packages\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cargo doc --open\"), \" - generate documentation for current Cargo project\")), mdx(\"h2\", {\n    \"id\": \"sources\"\n  }, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://doc.rust-lang.org/book/ch01-03-hello-cargo.html\"\n  }, \"https://doc.rust-lang.org/book/ch01-03-hello-cargo.html\"))));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"computer-science programming-languages rust\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"rust\"\n  }, \"Rust\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Rust\"), \" is a programming language focused on delivering high performance with low-level access alongside an improved developer experience compared to existing low-level languages like C and C++.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"runs very fast\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"prevents memory leaks and segmentation faults\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"guarantees thread safety\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"stresses performance and correctness\")), mdx(\"p\", null, \"Can be compiled down to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/WebAssembly\",\n    \"title\": \"WebAssembly\"\n  }, \"[[WebAssembly]]\"), \" for use in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/client-side-renderingorclient-side\",\n    \"title\": \"client-side-rendering|client-side\"\n  }, \"[[client-side-rendering|client-side]]\"), \" web applications.\"), mdx(\"h2\", {\n    \"id\": \"types\"\n  }, \"Types\"), mdx(\"p\", null, \"Rust has a strong, static type system. However, it also has type inference.\"), mdx(\"p\", null, \"Number types:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"i32\"), \", a 32-bit number\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"u32\"), \", an unsigned 32-bit number\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"useful for small, positive numbers\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"i64\"), \", a 64-bit number\")), mdx(\"h2\", {\n    \"id\": \"standard-library-std\"\n  }, \"Standard library (\", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"std\"), \")\"), mdx(\"p\", null, \"Rust's standard library has many useful packages:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"std::io\"), \" (input/output)\")), mdx(\"p\", null, \"Rust imports some packages automatically into every Rust program in the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"prelude\"), \".\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"kept small as possible\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"contains things used in every Rust program, like \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"traits\"))), mdx(\"h2\", {\n    \"id\": \"variables\"\n  }, \"Variables\"), mdx(\"p\", null, \"Variables in Rust are immutable by default. You must \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"explicitly\"), \" declare a variable to be mutable.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let apples = 5;  // immutable\\nlet mut bananas = 5;  // mutable\\n\")), mdx(\"p\", null, \"We can \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"shadow\"), \" variables by declaring the variable again, oftentimes with a different type. Shadowing is often used to convert a value from one type to another.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"lets us reuse variable names rather than forcing us to create two unique variables, causing confusion\")), mdx(\"h2\", {\n    \"id\": \"associated-functions\"\n  }, \"Associated Functions\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let mut guess = String::new();\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"::\"), \" syntax means that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new\"), \" is an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"associated function\"), \"\\nof the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \" type. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new\"), \" function creates a new, empty string. As a function, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new\"), \" is a common name across many types for a function that makes a new value of some kind.\"), mdx(\"h2\", {\n    \"id\": \"references\"\n  }, \"References\"), mdx(\"p\", null, \"A \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"reference\"), \" is a way to let multiple parts of the code access one piece of data without needing to copy that data into memory multiple times.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rust makes it safe and easy to use references\")), mdx(\"p\", null, \"References are indicated by a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&\"), \".\"), mdx(\"h2\", {\n    \"id\": \"enums\"\n  }, \"Enums\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Enumerations\"), \", or just \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"enums\"), \", are types with a fixed set of values, called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"variants\"), \".\"), mdx(\"p\", null, \"Examples:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Result\"), \" types, with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ok\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Err\"), \" variants\")), mdx(\"h2\", {\n    \"id\": \"match-expression\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"match\"), \" expression\"), mdx(\"p\", null, \"A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"match\"), \" expression is made up of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"arms\"), \".\"), mdx(\"p\", null, \"Each arm consists of a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"pattern\"), \", and the code that should be run if the value given to the beginning of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"match\"), \" expression fits that arm's pattern.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rust takes the value given to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"match\"), \" and looks through each arm's pattern in turn\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"match\"), \" expression \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"returns\"), \" a value\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"for error handling, using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"match\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"expect\"), \" is one way of moving from crashing on an error to handling the error\")), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let guess: u32 = match guess.trim().parse() {\\n    Ok(num) => num,\\n    Err(_) => continue,\\n};\\n\")), mdx(\"h2\", {\n    \"id\": \"sources\"\n  }, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.rust-lang.org\"\n  }, \"https://www.rust-lang.org\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html\"\n  }, \"The Rust Programming Language Ch. 2: Programming a Guessing Game\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.youtube.com/watch?v=ohuTy8MmbLc\"\n  }, \"Rust in the Browser for JavaScripters: New Frontiers, New Possibilities\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"aliases":[]},"parent":{"__typename":"File","id":"bff7d1a4-3518-5a12-940a-c125c880e96e","fields":{"slug":"/docs/rust","title":"Rust"}}}],"inboundReferences":[{"__typename":"Mdx","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": null\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"toml\"\n  }, \"TOML\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TOML (Tom's Obvious, Minimal Language)\"), \" is a file format designed for easy readability for both human and machine.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can easily be converted to a hashmap-like structure\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"used by \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Cargo\",\n    \"title\": \"Cargo\"\n  }, \"[[Cargo]]\"), \" as the configuration file format\")), mdx(\"h2\", {\n    \"id\": \"sources\"\n  }, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://doc.rust-lang.org/book/ch01-03-hello-cargo.html\"\n  }, \"https://doc.rust-lang.org/book/ch01-03-hello-cargo.html\"))));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"1575310b-f549-51b7-8f8e-9512505c5ba3","fields":{"slug":"/docs/toml","title":"TOML"}}}]},"fields":{"slug":"/docs/cargo","title":"Cargo"}}},"pageContext":{"id":"ac527191-d3b0-58e4-8e2a-64bbf406138c"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}