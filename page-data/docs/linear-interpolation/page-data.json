{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/docs/linear-interpolation","result":{"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"ece-402 dsp\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"linear-interpolation\"\n  }, \"Linear Interpolation\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Linear interpolation\"), \" is the process of generating values between two neighboring \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/sampling-signal-processingorsamples\",\n    \"title\": \"sampling-signal-processing|samples\"\n  }, \"[[sampling-signal-processing|samples]]\"), \" in a signal.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"effectively draws a straight line between two neighboring samples and returns the appropriate point along that line.\")), mdx(\"h2\", {\n    \"id\": \"definition\"\n  }, \"Definition\"), mdx(\"p\", null, \"Let $a$ be a number between 0 and 1 which represents how far we want to interpolate a signal $y$ between time $n$ and $n + 1$. Then we can define the linearly interpolated value $\\\\hat{y}(n+a)$ as follows:\"), mdx(\"p\", null, \"$$\\n\\\\hat{y}(n + a) = (1 - a) \\\\cdot y(n) + a \\\\cdot y(n+1)\\n$$\"), mdx(\"h2\", {\n    \"id\": \"sources\"\n  }, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://ccrma.stanford.edu/~jos/pasp/Linear_Interpolation.html\"\n  }, \"https://ccrma.stanford.edu/~jos/pasp/Linear_Interpolation.html\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://ccrma.stanford.edu/realsimple/Interpolation/\"\n  }, \"https://ccrma.stanford.edu/realsimple/Interpolation/\"))));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[],"inboundReferences":[]},"fields":{"slug":"/docs/linear-interpolation","title":"Linear Interpolation"}}},"pageContext":{"id":"2e5af77a-181a-5cd0-821c-b80fd504415e"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}